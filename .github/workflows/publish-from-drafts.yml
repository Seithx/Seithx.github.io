name: Publish cleaned blog post from drafts (Gemini 2.5 Pro)

on:
  schedule:
    - cron: "0 6 * * 2"   # Tue 09:00 Asia/Jerusalem = 06:00 UTC
    - cron: "0 6 * * 5"   # Fri 09:00 Asia/Jerusalem = 06:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find latest draft
        id: draft
        run: |
          set -e
          if [ -z "$(ls -A drafts 2>/dev/null)" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          latest="$(ls -1t drafts | head -n 1)"
          echo "file=$latest" >> $GITHUB_OUTPUT

      - name: Stop if no draft
        if: steps.draft.outputs.skip == 'true'
        run: echo "No drafts to publish."

      - name: Read draft contents
        id: read
        if: steps.draft.outputs.skip != 'true'
        run: jq -Rs . < "drafts/${{ steps.draft.outputs.file }}" > draft.json

      - name: Generate polished post with Gemini 2.5 Pro
        if: steps.draft.outputs.skip != 'true'
        id: llm
        env:
          GEMINI_API_KEY: ${{ secrets.GOOGLE_API }}   # your repo secret
        run: |
          set -e
          today=$(date -u +"%Y-%m-%d")
          raw=$(cat draft.json)   # JSON string of the draft text

          # Build a VALID request for the REST API:
          # - use systemInstruction for the style guide
          # - a single user message with your raw notes
          body=$(jq -n --arg raw "$raw" '{
            systemInstruction: {
              role: "system",
              parts: [{text: "You are a concise editor for a developer’s public learning log. Keep the author’s voice human and informal. Turn raw notes into a short Markdown blog post (250–450 words) with: a strong H1 title, a crisp intro, 3–6 bullet points for key learnings/struggles, a short reflection, and a one-line Next at the end. Add 4–6 tags as a comma list at the bottom. Output valid Markdown only."}]
            },
            contents: [
              {
                role: "user",
                parts: [{text: ("RAW NOTES:\\n" + ($raw | fromjson))}]
              }
            ],
            generationConfig: {temperature: 0.6}
          }')

          # Call Gemini (v1beta REST)
          curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$body" > out.json

          # Extract/assemble markdown from all parts
          text=$(jq -r '[.candidates[0].content.parts[]?.text] | join("\n")' out.json)
